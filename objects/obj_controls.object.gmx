<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>option_list = ds_list_create();

ds_list_add(option_list, "Move Left");
ds_list_add(option_list, "Move Right");
ds_list_add(option_list, "Jump/Skate");

selected = 0;

key_map = scr_generate_key_map();

new_key = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var up_pressed = false;
var down_pressed = false;
var confirm_pressed = false;
var quit_pressed = false;

if (!scr_fading()) {
    up_pressed = keyboard_check_pressed(vk_up);
    down_pressed = keyboard_check_pressed(vk_down);
    confirm_pressed = keyboard_check_pressed(vk_enter);
    quit_pressed = keyboard_check_pressed(vk_escape);
    any_pressed = keyboard_check_pressed(vk_anykey);
}

if (!new_key) {
    if (up_pressed &amp;&amp; selected &gt; 0) {
        audio_play_sound(snd_select, 0, false);
        selected--;
    }
    if (down_pressed &amp;&amp; selected &lt; ds_list_size(option_list) - 1) {
        audio_play_sound(snd_select, 0, false);
        selected++;
    }
        
    if (confirm_pressed) {
        audio_play_sound(snd_confirm, 0, false);
        new_key = true;
    }
    
    if (quit_pressed) {
        audio_play_sound(snd_cancel, 0, false);
        scr_room_goto(rm_title);
    }
}
else {
    if (quit_pressed) {
        audio_play_sound(snd_cancel, 0, false);
        new_key = false;
    }

    else if (any_pressed) {
        var pressed = keyboard_key;
        if scr_check_valid_key(pressed) {
            audio_play_sound(snd_confirm, 0, false);
            ds_list_replace(global.control_list, selected, pressed);
            new_key = false;
        }
        else
            audio_play_sound(snd_error, 0, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fnt_option);

var v_x = view_xview[0];
var v_y = view_yview[0];
var v_width = view_wview[0];
var v_height = view_hview[0];

var draw_x = v_x + v_width * (3 / 4);
var base_y = v_y + v_height / 2;

for (var i = 0; i &lt; ds_list_size(option_list); i++) {
    var draw_y = base_y + v_height / 8 * (i - selected);
    
    var draw_string;
    var draw_col1;
    var draw_col2;
    
    draw_col1 = global.color1;
    draw_col2 = global.color2;
    draw_string = ds_list_find_value(option_list, i);
    
    if (i == selected)
        draw_string = "&gt; " + draw_string + " &lt;";
    
    scr_draw_layered_text(draw_x, draw_y, draw_string, 1, draw_col1, draw_col2);
}

var title_x = v_x + v_width / 3;
var title_y = v_y + v_height / 2 - 36;

draw_set_halign(fa_left);

scr_draw_layered_text(title_x - 96, v_height - 40, "Select:#Confirm:#Go Back:", 1, global.color1, global.color2);

draw_set_halign(fa_right);

scr_draw_layered_text(title_x + 96, v_height - 40, "Up/Down#Enter#Escape", 1, global.color1, global.color2);

draw_set_halign(fa_center);

for (var i = 0; i &lt; ds_list_size(option_list); i++) {
    var control_text = ds_list_find_value(option_list, i) + ": " + ds_map_find_value(key_map, ds_list_find_value(global.control_list, i));
    scr_draw_layered_text(title_x, v_y + v_height / 2 - 32 + 32 * i, control_text, 1, global.color1, global.color2);
}

draw_set_font(fnt_complete);

scr_draw_layered_text(title_x, v_y + 48, "Controls", 2, global.color1, global.color2);

if (new_key) {
    draw_set_color(c_black);
    draw_set_alpha(0.5);
    
    draw_rectangle(v_x, v_y, v_x + v_width, v_y + v_height, false);
    
    draw_set_alpha(1);

    var prompt = "Press new " + ds_list_find_value(option_list, selected) + " key";
    scr_draw_layered_text(v_x + v_width / 2, v_y + v_height / 4, prompt, 2, global.color1, global.color2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
