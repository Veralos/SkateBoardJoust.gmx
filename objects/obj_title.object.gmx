<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>option_list = ds_list_create();

ds_list_add(option_list, "Play");
ds_list_add(option_list, "Controls");
ds_list_add(option_list, "Fullscreen");
ds_list_add(option_list, "Sound");
ds_list_add(option_list, "Music");

selected = 0;

sound_list = ds_list_create();

ds_list_add(sound_list, snd_select);
ds_list_add(sound_list, snd_error);
ds_list_add(sound_list, snd_jump);
ds_list_add(sound_list, snd_skate);
ds_list_add(sound_list, snd_bat_die);
ds_list_add(sound_list, snd_boy_die);
ds_list_add(sound_list, snd_confirm);
ds_list_add(sound_list, snd_lose_board);
ds_list_add(sound_list, snd_grind);
ds_list_add(sound_list, snd_score);

ini_open("sbj_data");
sound_gain = clamp(ini_read_real("data", "sound_gain", 1), 0, 1);
scr_list_gain(sound_list, sound_gain);

music_list = ds_list_create();

ds_list_add(music_list, snd_main_music);
ds_list_add(music_list, snd_music1);
ds_list_add(music_list, snd_music2);
ds_list_add(music_list, snd_music3);
ds_list_add(music_list, snd_music4);
ds_list_add(music_list, snd_fanfare);

music_gain = clamp(ini_read_real("data", "music_gain", 1), 0, 1);
scr_list_gain(music_list, music_gain);
audio_sound_gain(snd_grind, 0.1 * sound_gain, 0);
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("sbj_data");
ini_write_real("data", "music_gain", music_gain);
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("sbj_data");
ini_write_real("data", "sound_gain", sound_gain);
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var up_pressed = false;
var down_pressed = false;
var confirm_pressed = false;
var quit_pressed = false;

if (!scr_fading()) {
    up_pressed = keyboard_check_pressed(vk_up);
    down_pressed = keyboard_check_pressed(vk_down);
    confirm_pressed = keyboard_check_pressed(vk_enter);
    quit_pressed = keyboard_check_pressed(vk_escape);
}


if (up_pressed &amp;&amp; selected &gt; 0) {
    audio_play_sound(snd_select, 0, false);
    selected--;
}
if (down_pressed &amp;&amp; selected &lt; ds_list_size(option_list) - 1) {
    audio_play_sound(snd_select, 0, false);
    selected++;
}
    
if (confirm_pressed) {
    switch (selected) {
        case 0:
            audio_play_sound(snd_confirm, 0, false);
            scr_room_goto(rm_level_select);
            break;
        case 2:
            audio_play_sound(snd_confirm, 0, false);
            with (obj_draw_game)
                event_user(0);
            break;
        case 3:
            audio_play_sound(snd_confirm, 0, false);
            sound_gain += 0.1;
            if (sound_gain &gt; 1)
                sound_gain = 0;
            scr_list_gain(sound_list, sound_gain);
            audio_sound_gain(snd_grind, 0.1 * sound_gain, 0);
            alarm[0] = 1;
            break;
        case 4:
            audio_play_sound(snd_confirm, 0, false);
            music_gain += 0.1;
            if (music_gain &gt; 1)
                music_gain = 0;
            scr_list_gain(music_list, music_gain);
            alarm[1] = 1;
            break;
        default:
            audio_play_sound(snd_error, 0, false);
            break;
    }
            
    /*if (selected &lt;= global.levels_completed) {
        audio_play_sound(snd_confirm, 0, false);
        global.music = ds_list_find_value(music_list, selected mod ds_list_size(music_list));
        scr_room_goto(ds_list_find_value(option_list, selected));
    }
    else
        audio_play_sound(snd_error, 0, false);*/
}

if (quit_pressed)
    game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!audio_is_playing(snd_main_music))
    audio_play_sound(snd_main_music, 1, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fnt_option);

var v_x = view_xview[0];
var v_y = view_yview[0];
var v_width = view_wview[0];
var v_height = view_hview[0];

var draw_x = v_x + v_width * (3 / 4);
var base_y = v_y + v_height / 2;

for (var i = 0; i &lt; ds_list_size(option_list); i++) {
    var draw_y = base_y + v_height / 8 * (i - selected);
    
    var draw_string;
    var draw_col1;
    var draw_col2;
    
    draw_col1 = make_color_rgb(128, 128, 0);
    draw_col2 = make_color_rgb(196, 196, 0);
    draw_string = ds_list_find_value(option_list, i);
    
    if (i &gt;= 2)
        draw_string += ": ";
    
    switch (i) {
        case 2:
            if (window_get_fullscreen())
                draw_string += "On";
            else
                draw_string += "Off";
            break;
        case 3:
            draw_string += string(round(sound_gain * 100)) + "%";
            break;
        case 4:
            draw_string += string(round(music_gain * 100)) + "%";
            break;
    }
    
    if (i == selected)
        draw_string = "&gt; " + draw_string + " &lt;";
    
    scr_draw_layered_text(draw_x, draw_y, draw_string, 1, draw_col1, draw_col2);
}

var title_x = v_x + v_width / 3;
var title_y = v_y + v_height / 2 - 36;

draw_set_halign(fa_left);

scr_draw_layered_text(title_x - 96, v_height - 40, "Select:#Confirm:#Quit:", 1, make_color_rgb(128, 128, 0), make_color_rgb(196, 196, 0));

draw_set_halign(fa_right);

scr_draw_layered_text(title_x + 96, v_height - 40, "Up/Down#Enter#Escape", 1, make_color_rgb(128, 128, 0), make_color_rgb(196, 196, 0));

draw_set_halign(fa_center);
draw_set_font(fnt_title);
scr_draw_layered_text(title_x, title_y, "SKATE#BOARD#JOUST", 4, make_color_rgb(128, 128, 0), make_color_rgb(196, 196, 0));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
