<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!scr_fading() &amp;&amp; instance_number(obj_bat) &gt; 0)
    scr_room_goto(room);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var exit_pressed = false;
var up_pressed = false;
var down_pressed = false;
var confirm_pressed = false;

if (!scr_fading()) {
    exit_pressed = keyboard_check_pressed(vk_escape);
    up_pressed = keyboard_check_pressed(vk_up);
    down_pressed = keyboard_check_pressed(vk_down);
    confirm_pressed = keyboard_check_pressed(vk_enter);
}

if (instance_number(obj_bat) &lt;= 0) {
    if (!complete) {
        complete = true;
        audio_stop_sound(global.music);
        audio_play_sound(snd_fanfare, 0, false);
        
        if (global.levels_completed &lt;= global.selected) {
            global.levels_completed++;
            
            ini_open(global.filename);
            ini_write_real("data", "levels_completed", global.levels_completed);
            ini_close();
        }
        
        if (time &lt; ds_list_find_value(global.best_time_list, global.selected)) {
            best_time = true;
            ds_list_replace(global.best_time_list, global.selected, time);
            ini_open(global.filename);
            ini_write_real("time", "level" + string(global.selected + 1), time);
            ini_close();
        }
        
        if (time &lt; ds_list_find_value(global.pro_time_list, global.selected))
            pro_time = true;
            
        if (points &gt; ds_list_find_value(global.best_score_list, global.selected)) {
            best_score = true;
            ds_list_replace(global.best_score_list, global.selected, points);
            ini_open(global.filename);
            ini_write_real("score", "level" + string(global.selected + 1), points);
            ini_close();
        }
            
        if (points &gt; ds_list_find_value(global.pro_score_list, global.selected))
            pro_score = true;
    }
}
else {
    if (time &lt; 36000 &amp;&amp; !global.paused)
        time++;
    
    if (instance_number(obj_player) &gt; 0) {
        if (exit_pressed) {
            retry = true;
            global.paused = !global.paused;
            if (global.paused) {
                audio_pause_sound(global.music);
                audio_play_sound(snd_pause, 0, false);
            }
            else {
                audio_resume_sound(global.music);
                audio_play_sound(snd_cancel, 0, false);
            }
        }
    }
}

if (complete || global.paused) {
    if (up_pressed || down_pressed) {
        audio_play_sound(snd_select, 0, false);
        retry = !retry;
    }
    
    if (confirm_pressed) {
        audio_play_sound(snd_confirm, 0, false);
        if (retry) {
            audio_stop_sound(global.music);
            scr_room_goto(room);
        }
        else
            scr_room_goto(rm_level_select);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_sound(snd_fanfare);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0, 0, obj_white);

global.bats = 0;
global.paused = false;

retry = true;
complete = false;
time = 0;
points = 0;
combo = 1;
best_time = false;
best_score = false;
pro_time = false;
pro_score = false;

audio_stop_sound(snd_main_music);
audio_stop_sound(snd_fanfare);
if (!audio_is_playing(global.music))
    audio_play_sound(global.music, 1, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var v_x = view_xview[0];
var v_y = view_yview[0];
var v_width = view_wview[0];
var v_height = view_hview[0];

if (complete || global.paused) {
    draw_set_color(c_black);
    draw_set_alpha(0.5);
    
    draw_rectangle(v_x, v_y, v_x + v_width, v_y + v_height, false);
    
    draw_set_alpha(1);
    
    if (complete) {
        var exit_text = "Exit";
        var retry_text = "Retry";
        
        if (retry)
            retry_text = "&gt; Retry &lt;";
        else
            exit_text = "&gt; Exit &lt;";
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        
        var text_x = v_x + v_width / 2;
        var complete_y = v_y + v_height / 6;
        var option_y = v_y + v_height * (5 / 6);
        
        draw_set_font(fnt_complete);
        
        scr_draw_layered_text(text_x, complete_y, "Level Complete", 2, global.color1, global.color2);
        
        draw_set_font(fnt_option);
        
        scr_draw_layered_text(text_x, v_y + v_height / 2 - 16, "Time: " + scr_time_string(time), 1, global.color1, global.color2);
        scr_draw_layered_text(text_x, v_y + v_height / 2 + 16, "Score: " + string(points), 1, global.color1, global.color2);
        
        if (best_time)
            scr_draw_layered_text(v_x + v_width * (4/5), v_y + v_height / 2 - 16, "New Record!", 1, global.color1, global.color2);
        if (best_score)
            scr_draw_layered_text(v_x + v_width * (4/5), v_y + v_height / 2 + 16, "New Record!", 1, global.color1, global.color2);
            
        if (pro_time)
            scr_draw_layered_text(v_x + v_width * (1/5), v_y + v_height / 2 - 16, "Expert Rank!", 1, global.color1, global.color2);
        if (pro_score)
            scr_draw_layered_text(v_x + v_width * (1/5), v_y + v_height / 2 + 16, "Expert Rank!", 1, global.color1, global.color2);
        
        scr_draw_layered_text(text_x, option_y - 16, retry_text, 1, global.color1, global.color2);
        scr_draw_layered_text(text_x, option_y + 16, exit_text, 1, global.color1, global.color2);
    }
    else {
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_font(fnt_complete);
        
        var text_x = v_x + v_width / 2;
        
        scr_draw_layered_text(text_x, v_y + v_height / 3, "Paused", 2, global.color1, global.color2);
        
        draw_set_font(fnt_option)
        
        var exit_text = "Exit Level";
        var retry_text = "Restart";
        
        if (retry)
            retry_text = "&gt; Restart &lt;";
        else
            exit_text = "&gt; Exit Level &lt;";
        
        scr_draw_layered_text(text_x, v_y + v_height * (2 / 3) - 16, retry_text, 1, global.color1, global.color2);
        scr_draw_layered_text(text_x, v_y + v_height * (2 / 3) + 16, exit_text, 1, global.color1, global.color2);
    }
}
else {
    draw_set_font(fnt_option);
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    
    scr_draw_layered_text(v_x + 8, v_y + 16, scr_time_string(time), 1, global.color1, global.color2);
    
    draw_set_halign(fa_right);
    
    scr_draw_layered_text(v_x + v_width - 8, v_y + 16, points, 1, global.color1, global.color2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
